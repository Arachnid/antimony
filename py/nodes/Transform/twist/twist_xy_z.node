# Neil Gershenfeld 1/24/15

import fab

title('twist xy z')

def twist_xy_z(part,x0,y0,z0,z1,t0,t1):
   from fab.types import Shape, Transform
   t0 = math.pi*t0/180
   t1 = math.pi*t1/180
   dz = z1-z0
   # X' = x0 + (X-x0)*cos((t1*(Z-z0)+t0*(z1-Z))/dz) + (Y-y0)*sin((t1*(Z-z0)+t0*(z1-Z))/dz)
   # Y' = y0 - (X-x0)*sin((t1*(Z-z0)+t0*(z1-Z))/dz) + (Y-y0)*cos((t1*(Z-z0)+t0*(z1-Z))/dz)
   # Z' = Z
   # X = x0 + (X'-x0)*cos((t1*(Z-z0)+t0*(z1-Z))/dz) - (Y'-y0)*sin((t1*(Z-z0)+t0*(z1-Z))/dz)
   # Y = y0 + (X'-x0)*sin((t1*(Z-z0)+t0*(z1-Z))/dz) + (Y'-y0)*cos((t1*(Z-z0)+t0*(z1-Z))/dz)
   # Z = Z'

   return part.map(Transform(
      '+f%(x0)g+*-Xf%(x0)gc/+*f%(t1)g-Zf%(z0)g*f%(t0)g-f%(z1)gZf%(dz)g*-Yf%(y0)gs/+*f%(t1)g-Zf%(z0)g*f%(t0)g-f%(z1)gZf%(dz)g' % locals(),
      '+f%(y0)g-*-Xf%(x0)gs/+*f%(t1)g-Zf%(z0)g*f%(t0)g-f%(z1)gZf%(dz)g*-Yf%(y0)gc/+*f%(t1)g-Zf%(z0)g*f%(t0)g-f%(z1)gZf%(dz)g' % locals(),
      'Z',
      '-f%(x0)g+*-Xf%(x0)gc/+*f%(t1)g-Zf%(z0)g*f%(t0)g-f%(z1)gZf%(dz)g*-Yf%(y0)gs/+*f%(t1)g-Zf%(z0)g*f%(t0)g-f%(z1)gZf%(dz)g' % locals(),
      '+f%(y0)g+*-Xf%(x0)gs/+*f%(t1)g-Zf%(z0)g*f%(t0)g-f%(z1)gZf%(dz)g*-Yf%(y0)gc/+*f%(t1)g-Zf%(z0)g*f%(t0)g-f%(z1)gZf%(dz)g' % locals(),
      'Z'))

input('x0',float,0)
input('y0',float,0)
input('z0',float,-1)
input('z1',float,1)
input('theta0',float,0)
input('theta1',float,90)

input('shape',fab.types.Shape)
output('transform',twist_xy_z(shape,x0,y0,z0,z1,theta0,theta1))


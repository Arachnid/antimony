# Neil Gershenfeld 1/24/15

import fab

title('shear xy z')

def shear_xy_z(part,z0,z1,dx0,dy0,dx1,dy1):
   from fab.types import Shape, Transform
   dz = z1-z0
   # X' = X + (dx1*(Z-z0) + dx0*(z1-Z))/dz
   # Y' = Y + (dy1*(Z-z0) + dy0*(z1-Z))/dz
   # X = X' - (dx1*(Z-z0) + dx0*(z1-Z))/dz
   # Y = Y' - (dy1*(Z-z0) + dy0*(z1-Z))/dz
   return part.map(Transform(
      '-X/+*f%(dx1)g-Zf%(z0)g*f%(dx0)g-f%(z1)gZf%(dz)g' % locals(),
      '-Y/+*f%(dy1)g-Zf%(z0)g*f%(dy0)g-f%(z1)gZf%(dz)g' % locals(),
      'Z',
      '+X/+*f%(dx1)g-Zf%(z0)g*f%(dx0)g-f%(z1)gZf%(dz)g' % locals(),
      '+Y/+*f%(dy1)g-Zf%(z0)g*f%(dy0)g-f%(z1)gZf%(dz)g' % locals(),
      'Z'))

input('z0',float,0)
input('z1',float,1)
input('dx0',float,-1)
input('dy0',float,-1)
input('dx1',float,1)
input('dy1',float,1)

input('shape',fab.types.Shape)
output('transform',shear_xy_z(shape,z0,z1,dx0,dy0,dx1,dy1))

